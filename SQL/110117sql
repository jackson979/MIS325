--using the USING keyword for joins
SELECT invoice_number, vendor_name
FROM vendors
    JOIN invoices USING (vendor_id)
ORDER BY invoice_number;

--cross join explicit syntax
SELECT departments.department_number, department_name, employee_id, last_name
FROM departments CROSS JOIN employees
ORDER BY departments.department_number;

--cross join implicit syntax
SELECT departments.department_number, department_name, employee_id, last_name
FROM departments, employees
ORDER BY departments.department_number;

--union set operator
    SELECT 'Active' AS source, invoice_number, invoice_date, invoice_total
    FROM active_invoices
    WHERE invoice_date >= '01-JUN-2014'
UNION
    SELECT 'Paid' AS source, invoice_number, invoice_date, invoice_total
    FROM paid_invoices
    WHERE invoice_date >= '01-JUN-2014'
ORDER BY invoice_total DESC;

--union where you code it to tell between active and inactive accounts
    SELECT 'Active' AS source, invoice_number, invoice_date, invoice_total    
    FROM invoices    
    WHERE (invoice_total - payment_total - credit_total) > 0
UNION
    SELECT 'Paid' AS source, invoice_number, invoice_date, invoice_total    
    FROM invoices    
    WHERE (invoice_total -  payment_total - credit_total) <= 0
ORDER BY invoice_total DESC;

--minus set operator
    SELECT customer_first_name, customer_last_name
    FROM customers_ex
MINUS
    SELECT first_name, last_name
    FROM employees
ORDER BY customer_last_name;

--intersect set operator
    SELECT customer_first_name, customer_last_name     
    FROM customers_ex
INTERSECT
    SELECT first_name, last_name
    FROM employees;
    
--class exercise
    SELECT vendor_name, 'CA' AS vendor_state
    FROM vendors
    WHERE vendor_state = 'CA'
UNION
    SELECT vendor_name, 'Outside CA' AS vendor_state
    FROM vendors
    WHERE vendor_state <> 'CA'
ORDER BY vendor_name;